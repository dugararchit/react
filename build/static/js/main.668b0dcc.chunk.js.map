{"version":3,"sources":["Suggestions.js","Messagelist.js","App.js","services.js","index.js"],"names":["Suggestions","this","props","suggestions","length","className","map","item","index","phrase","key","onClick","onclicksuggestion","text","React","Component","Messagelist","scrollToBottom","objDiv","messagesEnd","scrollTop","scrollHeight","querytext","ref","el","sender","receiver","dangerouslySetInnerHTML","__html","type","handleSuggestionClick","speech","Speech","hasBrowserSupport","console","log","init","voices","then","data","catch","e","error","App","state","onClickSend","bind","element","document","getElementsByClassName","style","display","queryText","message","getElementById","value","trim","setState","fetch","response","json","detectIntent","success","err","alert","autoComplete","id","onKeyPress","event","placeholder","SpeechRecognition","autoStart","reactDOM","render"],"mappings":"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","file":"static/js/main.668b0dcc.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./App.css\";\r\nclass Suggestions extends React.Component {\r\n    render() {\r\n        if (this.props.suggestions.length > 0) {\r\n            return (\r\n                <li className=\"message right appeared\">\r\n                    {/* <div className=\"avatar\"></div> */}\r\n                    <div className=\"px-5\">\r\n                        {\r\n                            this.props.suggestions.map((item, index) => {\r\n                                var phrase = item.phrase;\r\n                                return (<button key={index} onClick={() => this.props.onclicksuggestion(phrase)} className=\"ml-1 btn btn-success\">{item.text}</button>)\r\n                            })\r\n                        }\r\n                    </div>\r\n                </li>\r\n            )\r\n        } else {\r\n            return (<p></p>);\r\n        }\r\n    }\r\n};\r\n\r\nexport default Suggestions;","import React from 'react';\r\nimport \"./App.css\";\r\nimport Suggestions from './Suggestions';\r\nclass Messagelist extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    scrollToBottom() {\r\n        var objDiv = this.messagesEnd;\r\n        objDiv.scrollTop = objDiv.scrollHeight;\r\n    }\r\n\r\n    handleSuggestionClick(querytext) {\r\n        this.props.onclicksuggestion(querytext);\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.props)\r\n        return (\r\n            <ul className=\"messages\" ref={(el) => { this.messagesEnd = el; }}>\r\n                {this.props.sender.map((item, index) => {\r\n                    \r\n                    var receiver = \"\";\r\n                    if (this.props.receiver[index] && this.props.receiver[index].length > 0) {\r\n                        receiver = <li className=\"message left appeared\">\r\n                            <div className=\"avatar\"></div>\r\n                            <div className=\"text_wrapper\">\r\n                                <div className=\"text\" dangerouslySetInnerHTML={{ __html: this.props.receiver[index] }}></div>\r\n                            </div>\r\n                        </li>\r\n                    }\r\n                    if (index === 0) {\r\n                        receiver = <li className=\"message right appeared\">\r\n                            <div className=\"avatar\"></div>\r\n                            <div className=\"list-group px-2\">\r\n                                <button type=\"button\" className=\"list-group-item list-group-item-action\" onClick={() => this.props.onclicksuggestion(\"field operator\")}><b>Steps- Field Operator</b></button>\r\n                                <button type=\"button\" className=\"list-group-item list-group-item-action\" onClick={() => this.props.onclicksuggestion(\"property source\")} ><b>Steps- Property source</b></button>\r\n                                <button type=\"button\" className=\"list-group-item list-group-item-action\" onClick={() => this.props.onclicksuggestion(\"Hi\")}><b>Say hi to bot</b></button>\r\n                            </div>\r\n                        </li>\r\n                    }\r\n                    return (<div key={index}>\r\n                        <li className=\"message right appeared\">\r\n                            <div className=\"avatar\"></div>\r\n                            <div className=\"text_wrapper\">\r\n                                <div className=\"text\"> {item} </div>\r\n                            </div>\r\n                        </li>\r\n                        {receiver}\r\n                    </div>)\r\n                })}\r\n                <Suggestions onclicksuggestion={(querytext) => this.handleSuggestionClick(querytext)} suggestions={this.props.suggestions}></Suggestions>\r\n            </ul>\r\n            // <div className=\"Messages\">\r\n            //     <div className=\"Messages_list\">\r\n            //         <div className=\"container\">\r\n            //             {\r\n            //                 this.props.sender.map((item, index) => {\r\n            //                     return (<div className=\"row\" key={index}>\r\n            //                         <div className=\"col-md-10 sender\">{item}</div>\r\n            //                         <div className=\"col-md-10 receiver text-right\">{this.props.receiver[index]}</div>\r\n            //                     </div>)\r\n            //                 })\r\n            //             }\r\n            //         </div>\r\n            //     </div>\r\n            // </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Messagelist;","import React from 'react';\r\nimport SpeechRecognition from 'react-speech-recognition';\r\nimport \"./App.css\";\r\nimport Messagelist from './Messagelist';\r\nimport { detectIntent } from './services';\r\n// import { BsFillMicFill, BsThreeDots } from \"react-icons/bs\";\r\n// import ReactDOMServer from 'react-dom/server';\r\n\r\nimport Speech from 'speak-tts';\r\n\r\nconst speech = new Speech();\r\nif (speech.hasBrowserSupport()) { // returns a boolean\r\n    console.log(\"speech synthesis supported\")\r\n}\r\n\r\nspeech.init({\r\n    'volume': 1,\r\n    'lang': 'en-GB',\r\n    'rate': 1,\r\n    'pitch': 1,\r\n    'voice': 'Google UK English Female',\r\n    'splitSentences': true,\r\n    'listeners': {\r\n        'onvoiceschanged': (voices) => {\r\n            console.log(\"Event voiceschanged\", voices)\r\n        }\r\n    }\r\n}).then((data) => {\r\n    // The \"data\" object contains the list of available voices and the voice synthesis params\r\n    console.log(\"Speech is ready, voices are available\", data)\r\n}).catch(e => {\r\n    console.error(\"An error occured while initializing : \", e)\r\n})\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            sender: [\"Hi I am Bot!!! What can I do for you today...\"],\r\n            receiver: [\"\"],\r\n            suggestions: []\r\n        }\r\n        this.onClickSend = this.onClickSend.bind(this);\r\n    }\r\n\r\n\r\n\r\n    toggleChatBot() {\r\n        let element = document.getElementsByClassName(\"Layout-expand\");\r\n        element[0].style.display = (element[0].style.display === \"\") ? \"block\" : \"\";\r\n    }\r\n\r\n    closeChatBot() {\r\n        let element = document.getElementsByClassName(\"Layout-expand\");\r\n        element[0].style.display = \"\";\r\n    }\r\n\r\n    onClickSend(queryText) {\r\n        var message = (queryText) ? queryText : document.getElementById(\"sendermessage\").value.trim();\r\n        if (message) {\r\n            this.setState({\r\n                sender: [...this.state.sender, message]\r\n            })\r\n            document.getElementById(\"sendermessage\").value = \"\";\r\n            this.setState({\r\n                suggestions: []\r\n            })\r\n            detectIntent(message).then(data => {\r\n                if (data.success && data.message) {\r\n                    // var message = data.message;\r\n                    // speech.speak({\r\n                    //     text: message,\r\n                    // }).then(() => {\r\n                    //     console.log(\"Success !\")\r\n                    // }).catch(e => {\r\n                    //     console.error(\"An error occurred :\", e)\r\n                    // })\r\n                    \r\n                    if(data.suggestions.length > 0){\r\n                        this.setState({\r\n                            suggestions: data.suggestions\r\n                        })\r\n                    }\r\n                    this.setState({\r\n                        receiver: [...this.state.receiver, data.message]\r\n                    })\r\n                } else {\r\n                    let message = \"There is an error while processing your request, please try after sometime.\";\r\n                    \r\n                    this.setState({\r\n                        receiver: [...this.state.receiver, message]\r\n                    })\r\n                }\r\n            }).catch(err => {\r\n                console.log(err);\r\n                var message = \"There is an error while processing your request, please try after sometime.\";\r\n                this.setState({\r\n                    receiver: [...this.state.receiver, message]\r\n                })\r\n                this.setState({\r\n                    receiver: [...this.state.receiver, message]\r\n                })\r\n            })\r\n        } else {\r\n            alert(\"Please Enter message\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //const { transcript, resetTranscript, startListening, stopListening } = this.props;\r\n        return (\r\n\r\n\r\n            <div className=\"container\">\r\n                {/* <span id=\"transcriptedvalue\">{transcript}</span> */}\r\n                <div className=\"chat_window\">\r\n\r\n                    <div className=\"top_menu\">\r\n                        <div className=\"title\">Chat</div>\r\n                    </div>\r\n                    <Messagelist onclicksuggestion={(querytext) => {\r\n                        this.onClickSend(querytext);\r\n                    }} sender={this.state.sender} \r\n                    receiver={this.state.receiver}\r\n                    suggestions={this.state.suggestions}\r\n                    ></Messagelist>\r\n\r\n                    <div className=\"bottom_wrapper clearfix\">\r\n                        <div className=\"message_input_wrapper\">\r\n                            <input className=\"message_input\" autoComplete=\"off\" id=\"sendermessage\" onKeyPress={event => {\r\n                                if (event.key === 'Enter') {\r\n                                    this.onClickSend();\r\n                                }\r\n                            }} placeholder=\"Type your message here...\" /></div>\r\n\r\n                        <div className=\"send_message\">\r\n                            <div className=\"icon\"></div>\r\n                            <div className=\"text\" onClick={() => {\r\n                                this.onClickSend()\r\n                            }}>Send</div>\r\n                        </div>\r\n\r\n                        {/* <div className=\"send_message\">\r\n                            <div className=\"text\" id=\"mic\" onClick={(e) => {\r\n                                document.getElementById(\"mic\").innerHTML = ReactDOMServer.renderToString(<BsThreeDots></BsThreeDots>);\r\n                                resetTranscript();\r\n                                startListening();\r\n                                setTimeout(() => {\r\n                                    stopListening();\r\n                                    this.onClickSend(document.getElementById(\"transcriptedvalue\").innerHTML);\r\n                                    document.getElementById(\"mic\").innerHTML = ReactDOMServer.renderToString(<BsFillMicFill></BsFillMicFill>);\r\n                                }, 5000)\r\n                            }}><BsFillMicFill>...</BsFillMicFill></div>\r\n                        </div> */}\r\n                    </div>\r\n\r\n\r\n                </div>\r\n                <div className=\"message_template\">\r\n                    <li className=\"message\">\r\n                        <div className=\"avatar\"></div>\r\n                        <div className=\"text_wrapper\">\r\n                            <div className=\"text\"></div>\r\n                        </div>\r\n                    </li>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\n\r\n\r\nconst options = {\r\n    autoStart: false\r\n}\r\n\r\nexport default SpeechRecognition(options)(App);","export const detectIntent = (message) => fetch(`https://gpmuk.com/chatbot/apicore/?query=${message}`)\r\n    .then(response => response.json())\r\n\r\n// export const detectIntent1 = (message) => fetch(`http://localhost/chatbot/apicore/?query=${message}`)\r\n//     .then(response => response.json())\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\n// import $ from 'jquery';\r\n//import Popper from 'popper.js';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport React from 'react';\r\nimport reactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nreactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}